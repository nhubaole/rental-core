// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification.sql

package dataaccess

import (
	"context"
)

const getNotificationsByUserID = `-- name: GetNotificationsByUserID :many
SELECT id, user_id, reference_id, reference_type, title, is_read, created_at, updated_at
FROM public.notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUserID(ctx context.Context, userID int32) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReferenceID,
			&i.ReferenceType,
			&i.Title,
			&i.IsRead,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
