// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: room.sql

package dataaccess

import (
	"context"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO "rooms" 
(
  "title", 
  "address", 
  "room_number", 
  "room_images", 
  "utilities", 
  "description", 
  "room_type", 
  "owner", 
  "capacity", 
  "gender", 
  "area", 
  "total_price", 
  "deposit", 
  "electricity_cost", 
  "water_cost", 
  "internet_cost", 
  "is_parking", 
  "parking_fee", 
  "status", 
  "is_rent", 
  "created_at", 
  "updated_at"
) 
VALUES 
(
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, now(), now()
)
`

type CreateRoomParams struct {
	Title           string   `json:"title"`
	Address         []string `json:"address"`
	RoomNumber      int32    `json:"room_number"`
	RoomImages      []string `json:"room_images"`
	Utilities       []string `json:"utilities"`
	Description     string   `json:"description"`
	RoomType        *string  `json:"room_type"`
	Owner           int32    `json:"owner"`
	Capacity        int32    `json:"capacity"`
	Gender          *int32   `json:"gender"`
	Area            float64  `json:"area"`
	TotalPrice      *float64 `json:"total_price"`
	Deposit         float64  `json:"deposit"`
	ElectricityCost float64  `json:"electricity_cost"`
	WaterCost       float64  `json:"water_cost"`
	InternetCost    float64  `json:"internet_cost"`
	IsParking       bool     `json:"is_parking"`
	ParkingFee      *float64 `json:"parking_fee"`
	Status          int32    `json:"status"`
	IsRent          bool     `json:"is_rent"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.Exec(ctx, createRoom,
		arg.Title,
		arg.Address,
		arg.RoomNumber,
		arg.RoomImages,
		arg.Utilities,
		arg.Description,
		arg.RoomType,
		arg.Owner,
		arg.Capacity,
		arg.Gender,
		arg.Area,
		arg.TotalPrice,
		arg.Deposit,
		arg.ElectricityCost,
		arg.WaterCost,
		arg.InternetCost,
		arg.IsParking,
		arg.ParkingFee,
		arg.Status,
		arg.IsRent,
	)
	return err
}
