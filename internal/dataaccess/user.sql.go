// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dataaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO PUBLIC.USERS
(
    phone_number,
    full_name,
    address,
    password,
    role,
    created_at
) VALUES
(
    $1,$2,$3,$4,$5,now()
)
`

type CreateUserParams struct {
	PhoneNumber string  `json:"phone_number"`
	FullName    string  `json:"full_name"`
	Address     *string `json:"address"`
	Password    string  `json:"password"`
	Role        int32   `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.PhoneNumber,
		arg.FullName,
		arg.Address,
		arg.Password,
		arg.Role,
	)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phone_number, full_name, address, created_at
FROM PUBLIC.USERS
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID          int32              `json:"id"`
	PhoneNumber string             `json:"phone_number"`
	FullName    string             `json:"full_name"`
	Address     *string            `json:"address"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FullName,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT phone_number, full_name, address, created_at
FROM PUBLIC.USERS
WHERE deleted_at IS NULL 
    AND phone_number = $1
`

type GetUserByPhoneRow struct {
	PhoneNumber string             `json:"phone_number"`
	FullName    string             `json:"full_name"`
	Address     *string            `json:"address"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phoneNumber)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.PhoneNumber,
		&i.FullName,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT phone_number, full_name, address, created_at 
FROM PUBLIC.USERS
WHERE deleted_at IS NULL
`

type GetUsersRow struct {
	PhoneNumber string             `json:"phone_number"`
	FullName    string             `json:"full_name"`
	Address     *string            `json:"address"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.PhoneNumber,
			&i.FullName,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
