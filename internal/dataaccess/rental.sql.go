// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rental.sql

package dataaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkRequestExisted = `-- name: CheckRequestExisted :one
SELECT status 
FROM PUBLIC.RENTAL_REQUESTS 
WHERE room_id = $1 and sender_id = $2
`

type CheckRequestExistedParams struct {
	RoomID   int32 `json:"room_id"`
	SenderID int32 `json:"sender_id"`
}

func (q *Queries) CheckRequestExisted(ctx context.Context, arg CheckRequestExistedParams) (int32, error) {
	row := q.db.QueryRow(ctx, checkRequestExisted, arg.RoomID, arg.SenderID)
	var status int32
	err := row.Scan(&status)
	return status, err
}

const checkRoomExisted = `-- name: CheckRoomExisted :one
SELECT id 
FROM PUBLIC.ROOMS 
WHERE id = $1
`

func (q *Queries) CheckRoomExisted(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, checkRoomExisted, id)
	err := row.Scan(&id)
	return id, err
}

const createRentalRequest = `-- name: CreateRentalRequest :one
INSERT INTO PUBLIC.RENTAL_REQUESTS
(
    code,
    sender_id,
    room_id,
    suggested_price,
    num_of_person,
    begin_date,
    end_date,
    addition_request,
    status,
    created_at,
    updated_at
) VALUES
(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, now(), now()
)
RETURNING code, sender_id, room_id, suggested_price, num_of_person, begin_date, end_date,     addition_request, status, created_at
`

type CreateRentalRequestParams struct {
	Code            string             `json:"code"`
	SenderID        int32              `json:"sender_id"`
	RoomID          int32              `json:"room_id"`
	SuggestedPrice  *float64           `json:"suggested_price"`
	NumOfPerson     *int32             `json:"num_of_person"`
	BeginDate       pgtype.Timestamptz `json:"begin_date"`
	EndDate         pgtype.Timestamptz `json:"end_date"`
	AdditionRequest *string            `json:"addition_request"`
	Status          int32              `json:"status"`
}

type CreateRentalRequestRow struct {
	Code            string             `json:"code"`
	SenderID        int32              `json:"sender_id"`
	RoomID          int32              `json:"room_id"`
	SuggestedPrice  *float64           `json:"suggested_price"`
	NumOfPerson     *int32             `json:"num_of_person"`
	BeginDate       pgtype.Timestamptz `json:"begin_date"`
	EndDate         pgtype.Timestamptz `json:"end_date"`
	AdditionRequest *string            `json:"addition_request"`
	Status          int32              `json:"status"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateRentalRequest(ctx context.Context, arg CreateRentalRequestParams) (CreateRentalRequestRow, error) {
	row := q.db.QueryRow(ctx, createRentalRequest,
		arg.Code,
		arg.SenderID,
		arg.RoomID,
		arg.SuggestedPrice,
		arg.NumOfPerson,
		arg.BeginDate,
		arg.EndDate,
		arg.AdditionRequest,
		arg.Status,
	)
	var i CreateRentalRequestRow
	err := row.Scan(
		&i.Code,
		&i.SenderID,
		&i.RoomID,
		&i.SuggestedPrice,
		&i.NumOfPerson,
		&i.BeginDate,
		&i.EndDate,
		&i.AdditionRequest,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
