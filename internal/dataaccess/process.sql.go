// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: process.sql

package dataaccess

import (
	"context"
)

const createProcessTracking = `-- name: CreateProcessTracking :one
insert INTO PUBLIC.PROCESS_TRACKING(
  actor, action, issued_at, request_id
)
VALUES ($1, $2 , now(), $3)
RETURNING id, actor, action, issued_at, request_id
`

type CreateProcessTrackingParams struct {
	Actor     int32  `json:"actor"`
	Action    string `json:"action"`
	RequestID int32  `json:"request_id"`
}

func (q *Queries) CreateProcessTracking(ctx context.Context, arg CreateProcessTrackingParams) (ProcessTracking, error) {
	row := q.db.QueryRow(ctx, createProcessTracking, arg.Actor, arg.Action, arg.RequestID)
	var i ProcessTracking
	err := row.Scan(
		&i.ID,
		&i.Actor,
		&i.Action,
		&i.IssuedAt,
		&i.RequestID,
	)
	return i, err
}

const getAllProcessTracking = `-- name: GetAllProcessTracking :many
select id, actor, action, issued_at, request_id from PUBLIC.PROCESS_TRACKING
where actor = $1
`

func (q *Queries) GetAllProcessTracking(ctx context.Context, actor int32) ([]ProcessTracking, error) {
	rows, err := q.db.Query(ctx, getAllProcessTracking, actor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessTracking
	for rows.Next() {
		var i ProcessTracking
		if err := rows.Scan(
			&i.ID,
			&i.Actor,
			&i.Action,
			&i.IssuedAt,
			&i.RequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessTrackingByRentalId = `-- name: GetProcessTrackingByRentalId :one
select id, actor, action, issued_at, request_id from PUBLIC.PROCESS_TRACKING
where request_id = $1
`

func (q *Queries) GetProcessTrackingByRentalId(ctx context.Context, requestID int32) (ProcessTracking, error) {
	row := q.db.QueryRow(ctx, getProcessTrackingByRentalId, requestID)
	var i ProcessTracking
	err := row.Scan(
		&i.ID,
		&i.Actor,
		&i.Action,
		&i.IssuedAt,
		&i.RequestID,
	)
	return i, err
}
