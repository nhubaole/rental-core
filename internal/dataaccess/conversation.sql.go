// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: conversation.sql

package dataaccess

import (
	"context"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO public.conversations
(user_a, user_b, last_message_id, created_at)
VALUES(
    $1, $2, $3, now()
)
RETURNING id
`

type CreateConversationParams struct {
	UserA         int32  `json:"user_a"`
	UserB         int32  `json:"user_b"`
	LastMessageID *int32 `json:"last_message_id"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (int32, error) {
	row := q.db.QueryRow(ctx, createConversation, arg.UserA, arg.UserB, arg.LastMessageID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getConversationByUserID = `-- name: GetConversationByUserID :many
SELECT id, user_a, user_b, last_message_id, created_at
FROM public.conversations
WHERE user_a = $1 OR user_b = $1
`

func (q *Queries) GetConversationByUserID(ctx context.Context, userA int32) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, getConversationByUserID, userA)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserA,
			&i.UserB,
			&i.LastMessageID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
