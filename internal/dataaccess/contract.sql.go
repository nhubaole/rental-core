// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contract.sql

package dataaccess

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContract = `-- name: CreateContract :exec
INSERT INTO PUBLIC.contracts
(
    code,                   -- Mã hợp đồng
    party_a,                -- ID của bên A
    party_b,                -- ID của bên B
    request_id,             -- ID của yêu cầu liên quan đến hợp đồng
    room_id,                -- ID của phòng
    actual_price,           -- Giá thực tế
    payment_method,         -- Phương thức thanh toán
    electricity_method,     -- Phương thức tính tiền điện
    electricity_cost,       -- Chi phí điện
    water_method,           -- Phương thức tính tiền nước
    water_cost,             -- Chi phí nước
    internet_cost,          -- Chi phí Internet
    parking_fee,            -- Phí giữ xe
    deposit,                -- Tiền cọc
    begin_date,             -- Ngày bắt đầu
    end_date,               -- Ngày kết thúc
    responsibility_a,       -- Trách nhiệm của bên A
    responsibility_b,       -- Trách nhiệm của bên B
    general_responsibility, -- Trách nhiệm chung
    signature_a,            -- Chữ ký của bên A
    signed_time_a,          -- Thời gian ký của bên A
    signature_b,            -- Chữ ký của bên B
    signed_time_b,          -- Thời gian ký của bên B
    contract_template_id,   -- ID mẫu hợp đồng
    created_at,             -- Thời gian tạo
    updated_at              -- Thời gian cập nhật
) VALUES
(
    $1,  -- Mã hợp đồng
    $2,  -- ID của bên A
    $3,  -- ID của bên B
    $4,  -- ID của yêu cầu
    $5,  -- ID của phòng
    $6,  -- Giá thực tế
    $7,  -- Phương thức thanh toán
    $8,  -- Phương thức tính tiền điện
    $9,  -- Chi phí điện
    $10, -- Phương thức tính tiền nước
    $11, -- Chi phí nước
    $12, -- Chi phí Internet
    $13, -- Phí giữ xe
    $14, -- Tiền cọc
    $15, -- Ngày bắt đầu
    $16, -- Ngày kết thúc
    $17, -- Trách nhiệm bên A
    $18, -- Trách nhiệm bên B
    $19, -- Trách nhiệm chung
    $20, -- Chữ ký bên A
    $21, -- Thời gian ký của bên A
    $22, -- Chữ ký bên B
    $23, -- Thời gian ký của bên B
    $24, -- ID mẫu hợp đồng
    NOW(), -- Thời gian tạo
    NOW()  -- Thời gian cập nhật
)
`

type CreateContractParams struct {
	Code                  string             `json:"code"`
	PartyA                int32              `json:"party_a"`
	PartyB                int32              `json:"party_b"`
	RequestID             int32              `json:"request_id"`
	RoomID                int32              `json:"room_id"`
	ActualPrice           float64            `json:"actual_price"`
	PaymentMethod         *string            `json:"payment_method"`
	ElectricityMethod     string             `json:"electricity_method"`
	ElectricityCost       float64            `json:"electricity_cost"`
	WaterMethod           string             `json:"water_method"`
	WaterCost             float64            `json:"water_cost"`
	InternetCost          float64            `json:"internet_cost"`
	ParkingFee            *float64           `json:"parking_fee"`
	Deposit               float64            `json:"deposit"`
	BeginDate             pgtype.Date        `json:"begin_date"`
	EndDate               pgtype.Date        `json:"end_date"`
	ResponsibilityA       string             `json:"responsibility_a"`
	ResponsibilityB       string             `json:"responsibility_b"`
	GeneralResponsibility *string            `json:"general_responsibility"`
	SignatureA            string             `json:"signature_a"`
	SignedTimeA           pgtype.Timestamptz `json:"signed_time_a"`
	SignatureB            string             `json:"signature_b"`
	SignedTimeB           pgtype.Timestamptz `json:"signed_time_b"`
	ContractTemplateID    *int32             `json:"contract_template_id"`
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) error {
	_, err := q.db.Exec(ctx, createContract,
		arg.Code,
		arg.PartyA,
		arg.PartyB,
		arg.RequestID,
		arg.RoomID,
		arg.ActualPrice,
		arg.PaymentMethod,
		arg.ElectricityMethod,
		arg.ElectricityCost,
		arg.WaterMethod,
		arg.WaterCost,
		arg.InternetCost,
		arg.ParkingFee,
		arg.Deposit,
		arg.BeginDate,
		arg.EndDate,
		arg.ResponsibilityA,
		arg.ResponsibilityB,
		arg.GeneralResponsibility,
		arg.SignatureA,
		arg.SignedTimeA,
		arg.SignatureB,
		arg.SignedTimeB,
		arg.ContractTemplateID,
	)
	return err
}

const createContractTemplate = `-- name: CreateContractTemplate :exec
INSERT INTO PUBLIC.contract_templates
(
    party_a,
    address,
    electricity_method,
    electricity_cost,
    water_method,
    water_cost,
    internet_cost,
    parking_fee,
    responsibility_a,
    responsibility_b,
    general_responsibility,
    created_at,
    updated_at
) VALUES
(
    $1, -- ID của bên A
    $2, -- Địa chỉ (mảng chuỗi)
    $3, -- Phương thức tính tiền điện
    $4, -- Chi phí điện
    $5, -- Phương thức tính tiền nước
    $6, -- Chi phí nước
    $7, -- Chi phí Internet
    $8, -- Phí giữ xe
    $9, -- Trách nhiệm bên A
    $10, -- Trách nhiệm bên B
    $11, -- Trách nhiệm chung
    NOW(), -- Thời gian tạo
    NOW()  -- Thời gian cập nhật
)
RETURNING id
`

type CreateContractTemplateParams struct {
	PartyA                int32    `json:"party_a"`
	Address               []string `json:"address"`
	ElectricityMethod     string   `json:"electricity_method"`
	ElectricityCost       float64  `json:"electricity_cost"`
	WaterMethod           string   `json:"water_method"`
	WaterCost             float64  `json:"water_cost"`
	InternetCost          float64  `json:"internet_cost"`
	ParkingFee            float64  `json:"parking_fee"`
	ResponsibilityA       string   `json:"responsibility_a"`
	ResponsibilityB       string   `json:"responsibility_b"`
	GeneralResponsibility string   `json:"general_responsibility"`
}

func (q *Queries) CreateContractTemplate(ctx context.Context, arg CreateContractTemplateParams) error {
	_, err := q.db.Exec(ctx, createContractTemplate,
		arg.PartyA,
		arg.Address,
		arg.ElectricityMethod,
		arg.ElectricityCost,
		arg.WaterMethod,
		arg.WaterCost,
		arg.InternetCost,
		arg.ParkingFee,
		arg.ResponsibilityA,
		arg.ResponsibilityB,
		arg.GeneralResponsibility,
	)
	return err
}

const getContractTemplateByAddress = `-- name: GetContractTemplateByAddress :one
SELECT 
    id,
    party_a,
    address,
    electricity_method,
    electricity_cost,
    water_method,
    water_cost,
    internet_cost,
    parking_fee,
    responsibility_a,
    responsibility_b,
    general_responsibility,
    created_at,
    updated_at,
    deleted_at
FROM 
    public.contract_templates
WHERE 
    address = $1::varchar[]
    AND deleted_at IS NULL
`

func (q *Queries) GetContractTemplateByAddress(ctx context.Context, dollar_1 []string) (ContractTemplate, error) {
	row := q.db.QueryRow(ctx, getContractTemplateByAddress, dollar_1)
	var i ContractTemplate
	err := row.Scan(
		&i.ID,
		&i.PartyA,
		&i.Address,
		&i.ElectricityMethod,
		&i.ElectricityCost,
		&i.WaterMethod,
		&i.WaterCost,
		&i.InternetCost,
		&i.ParkingFee,
		&i.ResponsibilityA,
		&i.ResponsibilityB,
		&i.GeneralResponsibility,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
