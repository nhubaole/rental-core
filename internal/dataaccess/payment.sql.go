// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment.sql

package dataaccess

import (
	"context"
)

const confirmPayment = `-- name: ConfirmPayment :one
UPDATE public.payments
SET status = 1
WHERE id = $1
RETURNING id
`

func (q *Queries) ConfirmPayment(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, confirmPayment, id)
	err := row.Scan(&id)
	return id, err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO public.payments(
    code, --1
    sender_id, --2
    bill_id, --3
    contract_id, --4
    amount, 
    status, 
    return_request_id, 
    transfer_content, 
    evidence_image, 
    paid_time
    )VALUES(
        $1, $2, $3, $4, $5, $6, $7, $8, $9, now())
`

type CreatePaymentParams struct {
	Code            string  `json:"code"`
	SenderID        int32   `json:"sender_id"`
	BillID          *int32  `json:"bill_id"`
	ContractID      *int32  `json:"contract_id"`
	Amount          float64 `json:"amount"`
	Status          int32   `json:"status"`
	ReturnRequestID *int32  `json:"return_request_id"`
	TransferContent *string `json:"transfer_content"`
	EvidenceImage   *string `json:"evidence_image"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.Code,
		arg.SenderID,
		arg.BillID,
		arg.ContractID,
		arg.Amount,
		arg.Status,
		arg.ReturnRequestID,
		arg.TransferContent,
		arg.EvidenceImage,
	)
	return err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, code, sender_id, bill_id, contract_id, amount, status, return_request_id, transfer_content, evidence_image, paid_time
FROM public.payments
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.SenderID,
			&i.BillID,
			&i.ContractID,
			&i.Amount,
			&i.Status,
			&i.ReturnRequestID,
			&i.TransferContent,
			&i.EvidenceImage,
			&i.PaidTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, code, sender_id, bill_id, contract_id, amount, status,return_request_id
FROM public.payments
WHERE id = $1
`

type GetPaymentByIDRow struct {
	ID              int32   `json:"id"`
	Code            string  `json:"code"`
	SenderID        int32   `json:"sender_id"`
	BillID          *int32  `json:"bill_id"`
	ContractID      *int32  `json:"contract_id"`
	Amount          float64 `json:"amount"`
	Status          int32   `json:"status"`
	ReturnRequestID *int32  `json:"return_request_id"`
}

func (q *Queries) GetPaymentByID(ctx context.Context, id int32) (GetPaymentByIDRow, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i GetPaymentByIDRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.SenderID,
		&i.BillID,
		&i.ContractID,
		&i.Amount,
		&i.Status,
		&i.ReturnRequestID,
	)
	return i, err
}
